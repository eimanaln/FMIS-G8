theory P1
begin

functions:
  mac/2, verify/3, true/0
equations:
  verify(k, m, mac(m, k)) = true

rule Register_key:
  [ Fr(~k) ]

  --[ Register($A, $B, ~k) ]->

  [ !SharedKey($A, $B, ~k) ]


rule Reveal_key:
  [ !SharedKey(A, B, k) ]

  --[ Reveal(A), Reveal(B) ]->

  [ Out(k) ]


rule Init_A:
  [ Fr(~idA), !SharedKey(B, A, kba) ]

  --[ Init('I', A, ~idA) ]->

  [ St_A_1(A, ~idA, kba, B) ]


rule Init_B:
  [ Fr(~idB), !SharedKey(B, A, kba) ]

  --[ Init('R', B, ~idB) ]->

  [ St_B_1(B, ~idB, kba, A) ]


rule A_1_send:
  [ Fr(~x), St_A_1(A, ~idA, kba, B) ]

  --[ Send(A, ~x) ]->

  [ St_A_2(A, ~idA, kba, B, ~x), Out(~x) ]


rule B_1_recv:
  [ St_B_1(B, ~idB, kba, A), In(x) ]

  --[ Recv(B, x), Running(B, A, <'I','R',x>)  ]->

  [ St_B_2(B, ~idB, kba, A, x) ]


rule B_2_send:
  [ St_B_2(B, ~idB, kba, A, x) ]

  --[ Send(A, mac(x, kba)) ]->

  [ St_B_3(B, ~idB, kba, A, x, mac(x, kba)), Out(mac(x, kba)) ]


rule A_2_recv:
  [ St_A_2(A, ~idA, kba, B, x), In(macx) ]

  --[ Recv(A, mac(x,kba)), Finish(), Commit(A, B, <'I','R',x>), _restrict(verify(kba, x, macx) = true) ]->

  [ St_A_3(A, ~idA, kba, B, x) ]

lemma UnidirectionalKey:
  " All a b k1 k2 #i #j.
      not (a = b) & Register(a, b, k1)@i & Register(b, a, k2)@j ==> not (k1 = k2)
      "
lemma executable: exists-trace
  " Ex #i. Finish()@i &
    not (Ex R A B id1 id2 #i #j. Init(R, A, id1)@i & Init(R, B, id2)@j & not (#i = #j)) &
    not (Ex A #i. Reveal(A)@i)
    "
lemma noninjectiveagreementINITIATOR:
  " All A B t #i.
      Commit(A,B,<'I','R',t>)@i &
        not ((Ex #r. Reveal(A)@r) | (Ex #r. Reveal(B)@r))
      ==> (Ex #j. Running(B,A,<'I','R',t>)@j)
      "
lemma injectiveagreementINITIATOR:
  " All A B t #i.
      Commit(A,B,<'I','R',t>)@i &
        not ((Ex #r. Reveal(A)@r) | (Ex #r. Reveal(B)@r))
      ==> (Ex #j. Running(B,A,<'I','R',t>)@j
        & not (Ex a2 b2 #i2. Commit(a2,b2,<'I','R',t>)@i2
          & not (#i2 = #i)))
          "
end
