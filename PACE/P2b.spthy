theory P2b
begin

functions:
  mac/2, verify/3, true/0
equations:
  verify(k, m, mac(m, k)) = true

// Set up symmetric LTK shared between A and B 
rule Setup_LTK:
  [ Fr(~k) ]
  -->
  [ !SharedKey($A, $B, ~k) ]

/*----------------------------------------*/

// Reveal Rules 
rule Reveal_LTK_A:
  [ !SharedKey(A, B, k) ]

  --[ Reveal(A)]->

  [ Out(k) ]


rule Reveal_LTK_B:
  [ !SharedKey(A, B, k) ]

  --[Reveal(B) ]->

  [ Out(k) ]

/*----------------------------------------*/

// Initalize states
// agent A has two keys: kab and kba 
rule Init_A:
  [ Fr(~idA), !SharedKey(A, B, kab) , !SharedKey(B, A, kba) ]

  --[ Init('I', A, ~idA), Register_Keys(A,B, kab, kba) ]->

  [ St_A_1(A, B, ~idA, kab, kba) ]


rule Init_B:
  [ Fr(~idB), !SharedKey(B, A, kba), !SharedKey(A, B, kab) ]

  --[ Init('R', B, ~idB), Register_Keys(B, A, kba, kab)  ]->

  [ St_B_1(B, A, ~idB, kba, kab) ]

/*----------------------------------------*/


// Protocol starts here 

// Alice sends nonce x to Bob
rule A_1_send:
  [ St_A_1(A, B, idA, kab, kba), Fr(~x) ]
   -->
   [ St_A_2(A, B, idA, kab, kba, ~x), Out(<'INITIATOR_A', ~x>) ]

// Bob recvs nonce x from Bob
rule B_1_recv:
  [ St_B_1(B, A, idB, kba, kab), In(<'INITIATOR_A', x>) ]
  -->
  [ St_B_2(B, A, idB, kba, kab, x) ]

// Bob sends nonce y to Alice
rule B_2_send:
  [ St_B_2(B, A, idB, kba, kab, x), Fr(~y) ]

  --[ Running(B,A,<'I','R',x,~y>) ]->

  [ St_B_3(B, A, idB, kba, kab, x, ~y), Out(<'INITIATOR_B', ~y>) ]

// Alice recvs nonce y from Bob
rule A_2_recv:
  [ St_A_2(A, B, idA, kab, kba, x), In(<'INITIATOR_B', y>) ]

  --[ Running(A,B,<'R','I',x,y>) ]->

  [ St_A_3(A, B, idA, kab, kba, x, y) ]

// Alice returns MAC(y, kab) to Bob
// Fix is added here 
rule A_3_send:
  [ St_A_3(A, B, idA, kab, kba, x, y)]
  -->
  [ St_A_4(A, B, idA, kab, kba, x, y), Out(<'RESPONDER_A', mac(<x,y>,kab)>)]

// Bob recvs MAC(y, kab) from Alice and verifies it 
rule B_3_recv:
  [ St_B_3(B, A, idB, kba, kab, x, y), In(<'RESPONDER_A', macxy>) ]

  --[ _restrict(verify(kab, <x,y>, macxy) = true), 
      Commit(B, A, <'R', 'I', x, y>) ]->

  [ St_B_4(B, A, idB, kba, kab, x, y) ]

// Bob sends MAC(x, kba) to Alice
rule B_4_send:
  [ St_B_4(B, A, idB, kba, kab, x, y) ]

  --[Finish(B, A, 'R', kab, kba, x, y)]->

  [ St_B_5(B, A, idB, kba, kab, x, y), Out(<'RESPONDER_B', mac(<x,y>,kba)>) ]


// Bob recvs MAC(x, kab) from Bob and verifies it 
rule A_4_recv:
  [ St_A_4(A, B, idA, kab, kba, x, y), In(<'RESPONDER_B',macxy>) ]

  --[Finish(A, B, 'I', kba, kab, x, y), 
     Commit(A,B,<'I','R',x,y>), 
      _restrict(verify(kba, <x,y>, macxy) = true) ]->

  [ St_A_5(A, B, idA, kab, kba, x, y) ]


/*----------------------------------------*/

restriction UnidirectionalKey:
 " All A B kab kba #i. 
 Register_Keys(A, B, kab, kba) @i & (kab = kba) ==> F
 " 

/* verified by tamarin*/
lemma executable: 
exists-trace
  " Ex A B x y kab kba #i #j.
      Finish(B ,A, 'R', kab, kba, x, y) @i 
        & Finish(A, B, 'I', kba, kab, x, y) @j 
          & not (Ex R A B id1 id2 #i #j. Init(R, A, id1)@i & Init(R, B, id2)@j & not (#i = #j))
            & not(Ex X #k. Reveal(X)@k)
    "

/* verified by tamarin*/
lemma injectiveagreementINITIATOR:
  " All A B t #i.
      Commit(A,B,<'I','R',t>)@i &
        not ((Ex #r. Reveal(A)@r) | (Ex #r. Reveal(B)@r))
      ==> (Ex #j. Running(B,A,<'I','R',t>)@j
        & not (Ex a2 b2 #i2. Commit(a2,b2,<'I','R',t>)@i2
          & not (#i2 = #i)))
          "

/* verified by tamarin*/
lemma injectiveagreementRESPONDER:
  " All A B t #i.
      Commit(A,B,<'R','I',t>)@i &
        not ((Ex #r. Reveal(A)@r) | (Ex #r. Reveal(B)@r))
      ==> (Ex #j. Running(B,A,<'R','I',t>)@j
        & not (Ex a2 b2 #i2. Commit(a2,b2,<'R','I',t>)@i2
          & not (#i2 = #i)))
          "

end
