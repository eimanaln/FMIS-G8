theory P3a
begin

functions:
  mac/2, verify/3, true/0, kdf/3
equations:
  verify(k, m, mac(m, k)) = true

// Set up symmetric LTK shared between A and B 
// k here means ltk
rule Setup_LTK:
  [ Fr(~k) ]
  -->
  [ !SharedKey($A, $B, ~k) ]

/*----------------------------------------*/

// Reveal Rules 
rule Reveal_LTK_A:
  [ !SharedKey(A, B, k) ]

  --[ Reveal(A)]->

  [ Out(k) ]


rule Reveal_LTK_B:
  [ !SharedKey(A, B, k) ]

  --[Reveal(B) ]->

  [ Out(k) ]

/*----------------------------------------*/

// Initalize states
rule Init_A:
  [ Fr(~idA), !SharedKey(A, B, k)]

  --[ Init('I', A, ~idA) ]->

  [ St_A_1(A, B, ~idA, k) ]


rule Init_B:
  [ Fr(~idB), !SharedKey(A, B, k) ]

  --[ Init('R', B, ~idB) ]->

  [ St_B_1(B, A, ~idB, k) ]

/*----------------------------------------*/


// Protocol starts here 

// Alice sends nonce x to Bob
rule A_1_send:
  [ St_A_1(A, B, idA, k), Fr(~x) ]
   -->
   [ St_A_2(A, B, idA, k, ~x), Out(<'NONCE_X', ~x>) ]

// Bob recvs nonce x from Bob
rule B_1_recv:
  [ St_B_1(B, A, idB, k), In(<'NONCE_X', x>) ]
  -->
  [ St_B_2(B, A, idB, k, x) ]

// Bob sends nonce y to Alice
// establish session key 
rule B_2_send:

let kab = kdf(k, x, ~y)

in 

  [ St_B_2(B, A, idB, k, x), Fr(~y) ]

  --[ Running(B, A,<'I','R', x, ~y, kab>) ]->

  [ St_B_3(B, A, idB, k, x, ~y), Out(<'NONCE_Y', ~y>) ]

// Alice recvs nonce y from Bob
rule A_2_recv:

let kab = kdf(k, x, y)

in 
  [ St_A_2(A, B, idA, k, x), In(<'NONCE_Y', y>) ]

  --[ Running(A, B, <'R','I', x, y, kab>) ]->

  [ St_A_3(A, B, idA, k, x, y) ]


// Alice returns MAC(y, kab) to Bob
rule A_3_send:

let kab = kdf(k, x, y) 

in 
  [ St_A_3(A, B, idA, k, x, y)]
  -->
  [ St_A_4(A, B, idA, k, x, y), Out(<'MAC_Y', mac(y,kab)>)]

// Bob recvs MAC(y, kab) from Alice and verifies it 
rule B_3_recv:
let kab = kdf(k, x, y)
in 
  [ St_B_3(B, A, idB, k, x, y), In(<'MAC_Y', macy>) ]

  --[ _restrict(verify(kab, y, macy) = true), 

      Commit(B, A, <'R', 'I', x, y, kab>) ]->

  [ St_B_4(B, A, idB, k, x, y) ]

// Bob sends MAC(x, kab) to Alice
rule B_4_send:
let kab = kdf(k, x, y)
in 
  [ St_B_4(B, A, idB, k, x, y) ]

  --[Finish(B, A, 'R', x, y, kab),

      Secret(A, B, kab) ]->

  [ St_B_5(B, A, idB, k, x, y), Out(<'MAC_X', mac(x,kab)>) ]


// Bob recvs MAC(x, kab) from Bob and verifies it 
rule A_4_recv: 
let kab = kdf(k, x, y)
in
  [ St_A_4(A, B, idA, k, x, y), In(<'MAC_X',macx>) ]

  --[ _restrict(verify(kab, x, macx) = true), 

     Commit(A, B, <'I','R',x, y, kab>), 

    Secret(A, B, kab), 
    
    Finish(A, B, 'I', x, y, kab) ]->

  [ St_A_5(A, B, idA, k, x, y) ]


/*----------------------------------------*/

/* verified by tamarin*/
lemma executable: 
exists-trace
  " Ex A B x y kab #i #j.
      Finish(B, A, 'R', x, y, kab) @i 
        & Finish(A, B, 'I',x, y, kab) @j 
          & not (Ex R A B id1 id2 #i #j. Init(R, A, id1)@i & Init(R, B, id2)@j & not (#i = #j))
            & not(Ex X #k. Reveal(X)@k)
    "

/* verified by tamarin*/ 
lemma injectiveagreementINITIATOR:
  " All A B t #i.
      Commit(A,B,<'I','R',t>)@i &
        not ((Ex #r. Reveal(A)@r) | (Ex #r. Reveal(B)@r))
      ==> (Ex #j. Running(B,A,<'I','R',t>)@j
        & not (Ex a2 b2 #i2. Commit(a2,b2,<'I','R',t>)@i2
          & not (#i2 = #i)))
          "

/* verified by tamarin*/
lemma injectiveagreementRESPONDER:
  " All A B t #i.
      Commit(A,B,<'R','I',t>)@i &
        not ((Ex #r. Reveal(A)@r) | (Ex #r. Reveal(B)@r))
      ==> (Ex #j. Running(B,A,<'R','I',t>)@j
        & not (Ex a2 b2 #i2. Commit(a2,b2,<'R','I',t>)@i2
          & not (#i2 = #i)))
          "

/* verified by tamarin*/
lemma secrecy:
  "All A B x #i.
    Secret(A,B,x)@i &
    not ((Ex #r. Reveal(A)@r) | (Ex #r. Reveal(B)@r))
    ==> not (Ex #j. K(x)@j)"

end
